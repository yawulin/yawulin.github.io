{"meta":{"title":"涯无凌","subtitle":"一枚渣渣前端工程师","description":"涯无凌的个人博客","author":"涯无凌","url":"http://blog.ywulin.com"},"pages":[],"posts":[{"title":"Framework7+Framework7-vue+vue踩坑记（一）","slug":"201707141526","date":"2017-07-14T07:27:13.000Z","updated":"2017-07-17T09:23:29.324Z","comments":true,"path":"201707141526.html","link":"","permalink":"http://blog.ywulin.com/201707141526.html","excerpt":"用vue来做webapp是很合适的，它有自己的路由和过渡，不过对于ios系统的侧滑返回功能，vue-router有点瑕疵，过渡动画会重复。故使用淘宝针对ios制作的framework7+vue来做webapp。framework7-vue出的时间不长，官网上描述不是特别详细，所以在这里使用vue+framework7-vue+framework7来重绘官网的demo。","text":"用vue来做webapp是很合适的，它有自己的路由和过渡，不过对于ios系统的侧滑返回功能，vue-router有点瑕疵，过渡动画会重复。故使用淘宝针对ios制作的framework7+vue来做webapp。framework7-vue出的时间不长，官网上描述不是特别详细，所以在这里使用vue+framework7-vue+framework7来重绘官网的demo。 网上关于framework7-vue的博客基本没有，所以我决定来踩波坑，以下是我在使用framework7-vue时遇到的一些需要注意的点 1、this指向 在定时器和framework7的api回调函数中，this会被修改指向其他作用域，在定时器或回调api调用之前定义一个变量保存指向vue作用域的this 2、Autocomplete功能实现 framework7-vue没有Autocomplete组件，需要自己手动实现，Autocomplete主要通过js进行配置和初始化，自定义选项较多。Autocomplete需要使用到f7-list组件作为输入的容器，代码如下： 123456&lt;f7-list form&gt; &lt;f7-list-item&gt; &lt;f7-label&gt;Fruit&lt;/f7-label&gt; &lt;f7-input type=\"text\" placeholder=\"Fruit\" id=\"autocomplete-dropdown\"&gt;&lt;/f7-input&gt; &lt;/f7-list-item&gt;&lt;/f7-list&gt; 此外还需要在vue的生命周期mounted中进行初始化tips：不能在created中进行初始化，这时候模板尚未编译挂载，无法将插件绑定到dom上 1234567891011121314151617181920212223242526data() &#123; return &#123; fruits: ('Apple Apricot Avocado Banana Melon Orange Peach Pear Pineapple').split(' ') &#125;&#125;mounted() &#123; //注意，这里在插件初始化中this并非指向Vue实例的 let fruits = this.fruits; let autocompleteDropdownSimple = window.f7.autocomplete(&#123; input: '#autocomplete-dropdown', openIn: 'dropdown', source: function (autocomplete, query, render) &#123; let results = [] if (query.length === 0) &#123; render(results) return &#125; for (let i = 0; i &lt; fruits.length; i++) &#123; if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) &gt;= 0) &#123; results.push(fruits[i]) &#125; &#125; render(results) &#125; &#125;)&#125; 其他类型的选项请参照官网原生文档实现：http://docs.framework7.cn/Index/autocomplete.html 3、this.$$ &amp; this.Dom7 中无jsonp请求 在this.$$中无jsonp请求，若要使用jsonp，可安装vue-resource（不过该插件作者已宣布不再更新），用法一样 4、Calendar / Datepicker framework7-vue没有Calendar / Datepicker的组件，需要手动实现，跟Autocomplete一样，代码如下 123456789&lt;template&gt; &lt;f7-page&gt; &lt;f7-list form&gt; &lt;f7-list-item&gt; &lt;f7-input type=\"text\" placeholder=\"Select date\" readonly id=\"calendar-disabled\"&gt;&lt;/f7-input&gt; &lt;/f7-list-item&gt; &lt;/f7-list&gt; &lt;/f7-page&gt;&lt;/template&gt; 123456789&lt;script&gt;export default&#123; mounted () &#123; let calendarDefault = this.$f7.calendar(&#123; input: '#calendar-default' &#125;) &#125;&#125;&lt;/script&gt; 5、Contacts framework7-vue中有contacts-list组件，其.list.group-title在谷歌浏览器调试时，position: sticky中top是相对于viewport定位的，所以滚动后处于浏览器顶部，被navbar遮住，但在手机上是正常显示的，其top是相对于.page-content定位的 6、层级路由 framework7-vue在本文章撰写时除了在同页面Tab中有层级路由外，没有实现页面间的层级路由，跟vue-router不一样，要实现页面间的层级跳转，路由的写法跟平时写法一致，直接跳转即可，如下 123456789101112131415[ &#123; path: '/floatingAction/', component: require('./pages/floatingAction/floatingAction.vue'), &#125;, &#123; //我这里为了显示出层级关系，将其上一级页面的路由也包含进去，事实上是可以不用这么做的 path: '/floatingAction/staticFloating/', component: require('./pages/floatingAction/staticFloating.vue') &#125;, &#123; path: '/floatingAction/speedDial/', component: require('./pages/floatingAction/speedDial.vue') &#125;] 7、f7-input: type=”select” f7-input中设置type=&quot;select&quot;，不会有默认选中项，需要在f7-input中绑定v-model=&quot;selected&quot;，而给option设置selected属性是不会显示选中项的 8、无限滚动Infinite Scroll 无限滚动的实现是在f7-page中加上infinite-scroll，滚动事件为@infinite=&quot;doSomething&quot;，页面每次变更都需要重新刷新一次浏览器，否则infinite事件不会绑定，infinite-scroll是在page:init即页面初始化时初始化的，而热加载不会重新执行一遍page:init。以下是代码实现： 12345678910111213&lt;template&gt; &lt;f7-page infinite-scroll @infinite=\"onInfiniteScroll\"&gt; &lt;f7-navbar title=\"Infinite Scroll\" back-link=\"返回\" sliding&gt; &lt;f7-nav-right&gt; &lt;f7-link icon=\"icon icon-bars\" open-panel=\"left\"&gt;&lt;/f7-link&gt; &lt;/f7-nav-right&gt; &lt;/f7-navbar&gt; &lt;f7-block-title&gt;SCROLL BOTTOM&lt;/f7-block-title&gt; &lt;f7-list&gt; &lt;f7-list-item v-for=\"item in items\" :title=\"'Item ' + item\"&gt;&lt;/f7-list-item&gt; &lt;/f7-list&gt; &lt;/f7-page&gt;&lt;/template&gt; 12345678910111213141516171819202122232425262728293031323334&lt;script&gt;export default &#123; data () &#123; return &#123; items: 20, loading: false, maxLength: 60 &#125; &#125;, methods: &#123; onInfiniteScroll: function () &#123; if (this.loading) &#123; return; &#125; this.loading = true; let _this = this; setTimeout(function () &#123; _this.loading = false; if (_this.items &gt;= _this.maxLength) &#123; _this.$f7.detachInfiniteScroll(_this.$$('.infinite-scroll')) _this.$$('.infinite-scroll-preloader').remove() return &#125; _this.items += 20; &#125;, 1000) &#125; &#125;&#125;&lt;/script&gt; 9、f7-list的灵活性 f7-list的比较灵活，严格来说应该是f7-list-item比较灵活，自由度高，该组件在设计时添加了不少slot选项来分发内容 灵活运用slots可以实现各种列表效果，如以下效果： 代码的实现如下 1234567891011121314151617181920212223242526&lt;f7-list-item title=\"No icons here\"&gt; &lt;ul slot=\"root\"&gt; &lt;f7-list-item link=\"#\" media=\"&lt;i class='icon icon-f7'&gt;&lt;/i&gt;\" title=\"Ivan Petrov\" after=\"CEO\" &gt;&lt;/f7-list-item&gt; &lt;f7-list-item link=\"#\" media=\"&lt;i class='icon icon-f7'&gt;&lt;/i&gt;&lt;i class='icon icon-f7'&gt;&lt;/i&gt;\" title=\"Two icons here\" &gt;&lt;/f7-list-item&gt; &lt;f7-list-item title=\"No icons here\"&gt;&lt;/f7-list-item&gt; &lt;f7-list-item link=\"#\" media=\"&lt;i class='icon icon-f7'&gt;&lt;/i&gt;\" title=\"Ultra long text goes here, no, it is really really long\" &gt;&lt;/f7-list-item&gt; &lt;f7-list-item media=\"&lt;i class='icon icon-f7'&gt;&lt;/i&gt;\" title=\"With switch\"&gt; &lt;f7-input type='switch' slot=\"after\"&gt;&lt;/f7-input&gt; &lt;/f7-list-item&gt; &lt;/ul&gt;&lt;/f7-list-item&gt; 10、$router 要在javascript中使用路由$router，用法为this.$router，$router是保存在vue作用域中的 framework7-vue的注意点目前就写到这，后面继续更新基于framework7-vue实现的官方实例 vue-framework7，持续更新中，欢迎star","categories":[{"name":"webapp","slug":"webapp","permalink":"http://blog.ywulin.com/categories/webapp/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://blog.ywulin.com/tags/vue/"},{"name":"framework7","slug":"framework7","permalink":"http://blog.ywulin.com/tags/framework7/"}]},{"title":"gulp自动化构建工具学习","slug":"201706251602","date":"2017-06-25T08:02:45.000Z","updated":"2017-06-25T08:20:09.953Z","comments":true,"path":"201706251602.html","link":"","permalink":"http://blog.ywulin.com/201706251602.html","excerpt":"Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。在这里介绍了gulp的入门，插件和gulpfile.js配置文件。","text":"Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。在这里介绍了gulp的入门，插件和gulpfile.js配置文件。 入门 全局安装gulp $ npm install -g gulp 新建一个文件夹作为项目，进入该文件夹，初始化 $ mkdir example $ npm init 安装开发依赖（devDependences） $ npm install --save-dev gulp 在项目根目录新建 gulpfile.js 文件 $ touch gulpfile.js 编辑gulpfile.js文件 12345var gulp = require('gulp'); gulp.task('default', function () &#123; //默认任务代码 &#125;); 命令行运行gulp，即可运行默认任务 $ gulp api介绍 这里只列出api常用用法，了解更多请查阅官网http://www.gulpjs.com.cn/docs/api/ gulp.src(globs[, options]) 输出符合匹配的文件并返回一个stream，可pipe到其他插件 golbs(类型：String或Array) String: ‘src/js/*.js’Array: [‘src/js/*.js’, ‘src/css/*.css’] gulp.dest(path[, options]) 将pipe进来的数据转存为指定文件夹下的文件，若指定文件夹不存在，则自动创建该文件夹 path(类型：String或Function) String: ‘dist/js’Function: 在函数中返回相应路径 gulp.task(name[, deps], fn) 定义一个任务 123gulp.task('something', functio () &#123; doSomething();&#125;); name(类型：String) 任务的名字，可在命令行中通过name运行任务，$ gulp name deps(类型：Array) 一个包含任务列表的数组，这些任务会在当前任务运行之前完成 fn(类型：Function) 该任务要执行的内容 gulp.watch(glob[, opts], tasks) 或 gulp.watch(globs[, opts, cb]) 文件监视，当指定匹配文件发生变化时，执行tasks或函数cb glob(类型：String或Array) tasks(类型：String或Array) 文件变动后执行之前定义好的任务 cb(类型： Function) 传入一个记录文件变动的event对象，event.type记录变动类型：added, changed, deleted；event.path记录变动文件的路径 gulp插件介绍 gulp-less/gulp-sass 预编译less/sass文件为css文件 安装：$ npm install --save-dev gulp-less gulp-autoprefixer 设置浏览器版本，css文件自动添加浏览器前缀 安装：$ npm install --save-dev gulp-autoprefixer gulp-minify-css 压缩css文件 安装：$ npm install --save-dev gulp-minify-css gulp-rename 重命名要输出的文件，如将.css重命名为.min.css 安装：$ npm install --save-dev gulp-rename vinyl-buffer 将vinyl对象内容中的stream转换为buffer 安装：$ npm install --save-dev vinyl-buffer vinyl-source-stream 将Browserify的bundle()的输出转换为Gulp可用的vinyl流 安装：$ npm install --save-dev vinyl-source-stream gulp-sourcemaps 编写内联sourcemaps 安装：$ npm install --save-dev gulp-sourcemaps browserify 可以让你使用类似于 node 的 require() 的方式来组织浏览器端的 Javascript 代码，在这里用来管理依赖 安装：$ npm install --save-dev browserify babelify 将ES6转换成ES5 安装：$ npm install --save-dev babelify gulp-uglify 压缩 JavaScript 文件 安装：$ npm install --save-dev gulp-uglify gulp-imagemin 压缩 png，jpeg，gif和svg图片资源 安装：$ npm install --save-dev gulp-imagemin gulp-cache 图片缓存，只有图片替换了才压缩 安装：$ npm install --save-dev gulp-cache gulp-clean 移除文件或文件夹 安装：$ npm install --save-dev gulp-clean gulp-util 包含gulp的一些实用功能，在这里用来打印编译错误 安装：$ npm install --save-dev gulp-util gulp-notify 当文件变更时提醒 安装：$ npm install gulp-notify gulp-connect gulp中用来运行服务器的插件，内含LiveReload，自动刷新浏览器 安装：$ npm install --save-dev gulp-connect gulpfile.js文件配置 内含 ES6 转 ES5 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139var gulp = require('gulp'), less = require('gulp-less'), autoprefixer = require('gulp-autoprefixer'), minifycss = require('gulp-minify-css'), uglify = require('gulp-uglify'), imagemin = require('gulp-imagemin'), rename = require('gulp-rename'), clean = require('gulp-clean'), cache = require('gulp-cache'), notify = require('gulp-notify'), browserify = require('browserify'), babelify = require('babelify'), buffer = require('vinyl-buffer'), source = require('vinyl-source-stream'), sourcemaps = require('gulp-sourcemaps'), gutil = require('gulp-util'), connect = require('gulp-connect');/* * styles任务，将'src/less'目录下的less文件转换成css文件， * 并加上浏览器前缀，存放于'dist/css'目录下，之后重命名加上.min，压缩， * 保存为.min.css文件，之后刷新浏览器，并提醒style任务完成 */gulp.task('styles', function() &#123; return gulp.src('src/less/*.less') .pipe(less()) .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4')) .on('error', gutil.log) .pipe(gulp.dest('dist/css')) .pipe(rename(&#123;suffix: '.min'&#125;)) .pipe(sourcemaps.init()) .pipe(minifycss()) .pipe(sourcemaps.write('./')) .pipe(gulp.dest('dist/css')) .pipe(connect.reload()) .pipe(notify(&#123;message: 'style task complete'&#125;);&#125;);/* * scripts任务，通过browserify设置入口文件，然后用babelify将 * es6转换成es5，保存在'dist/js'目录下，之后压缩js文件，重命名 * 保存为.min.js文件 */gulp.task('scripts', function() &#123; var b = browserify(&#123; entries: 'src/js/cart.js', debug: true &#125;); return b.transform(babelify.configure(&#123; presets: [\"es2015\"] &#125;)) .bundle() .on('error', gutil.log) .pipe(source('cart.js')) .pipe(gulp.dest('dist/js')) .pipe(buffer()) .pipe(sourcemaps.init(&#123;loadMaps: true&#125;)) .pipe(uglify()) .on('error', gutil.log) .pipe(sourcemaps.write('./')) .pipe(rename(&#123; suffix: '.min'&#125;)) .pipe(gulp.dest('dist/js')) .pipe(connect.reload());&#125;);/* * images任务，读取'src/img'目录下的图片，压缩并保存到'dist/img'目录下 */gulp.task('images', function() &#123; return gulp.src('src/img/*') .pipe(cache(imagemin([ imagemin.gifsicle(&#123;interlaced: true&#125;), imagemin.jpegtran(&#123;progressive: true&#125;), imagemin.optipng(&#123;optimizationLevel: 5&#125;), imagemin.svgo(&#123;plugins: [&#123;removeViewBox: true&#125;]&#125;)]))) .on('error', gutil.log) .pipe(gulp.dest('dist/img')) .pipe(connect.reload());&#125;);/* * html任务，读取'src'目录下的html文件，并保存到'dist'目录下 */gulp.task('html', function() &#123; return gulp.src('src/shangcheng/*.html') .pipe(gulp.dest('dist/')) .pipe(connect.reload());&#125;);/* * connect任务，运行服务器并自动刷新浏览器 */gulp.task('connect', function() &#123; connect.server(&#123; livereload: true &#125;);&#125;);/* * clean任务，将dist目录下的css文件，js文件，图片文件和html文件清除 */gulp.task('clean', function() &#123; return gulp.src(['dist/css', 'dist/js', 'dist/img', 'dist/*.html'], &#123;read: false&#125;) .pipe(clean());&#125;);/* * 默认任务，在开始执行styles任务，scripts任务，images任务，html任务 * 之前先执行clean任务 */gulp.task('default', ['clean'], function() &#123; gulp.start('styles', 'scripts', 'images', 'html');&#125;);/* * 监视任务，监听less文件，js文件，图片文件和html文件的变更 */gulp.task('watch', function() &#123; //监听所有.less gulp.watch('src/less/*.less', ['styles']); //监听所有.js文件 gulp.watch('src/js/*.js', ['scripts']); //监听所有图片文件 gulp.watch('src/img/*', ['images']); //监听html文件 gulp.watch('src/*.html', ['html']);&#125;);/* * server任务，执行connect任务和watch任务 */gulp.task('server', ['connect', 'watch']); 不含 ES6 的 js 文件任务 1234567891011gulp.task('scripts', function() &#123; return gulp.src('src/js/*.js') .pipe(gulp.dest('dist/js')) .pipe(rename(&#123; suffix: '.min' &#125;)) .pipe(sourcemaps.init(&#123;loadMaps: true&#125;)) .pipe(uglify()) .pipe(sourcemaps.write('./')) .on('error', gutil.log) .pipe(gulp.dest('dist/js')) .pipe(connect.reload());&#125;);","categories":[{"name":"自动化构建工具","slug":"自动化构建工具","permalink":"http://blog.ywulin.com/categories/自动化构建工具/"}],"tags":[{"name":"gulp","slug":"gulp","permalink":"http://blog.ywulin.com/tags/gulp/"}]}]}