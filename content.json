{"meta":{"title":"涯无凌","subtitle":"一枚渣渣前端工程师","description":"涯无凌的个人博客","author":"涯无凌","url":"http://blog.ywulin.com"},"pages":[],"posts":[{"title":"201706251602","slug":"201706251602","date":"2017-06-25T08:02:45.000Z","updated":"2017-06-25T08:06:22.842Z","comments":true,"path":"201706251602.html","link":"","permalink":"http://blog.ywulin.com/201706251602.html","excerpt":"Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。在这里介绍了gulp的入门，插件和gulpfile.js配置文件。","text":"Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。在这里介绍了gulp的入门，插件和gulpfile.js配置文件。 入门 全局安装gulp $ npm install -g gulp 新建一个文件夹作为项目，进入该文件夹，初始化 $ mkdir example $ npm init 安装开发依赖（devDependences） $ npm install --save-dev gulp 在项目根目录新建 gulpfile.js 文件 $ touch gulpfile.js 编辑gulpfile.js文件 12345var gulp = require('gulp'); gulp.task('default', function () &#123; //默认任务代码 &#125;); 命令行运行gulp，即可运行默认任务 $ gulp api介绍 这里只列出api常用用法，了解更多请查阅官网http://www.gulpjs.com.cn/docs/api/ gulp.src(globs[, options]) 输出符合匹配的文件并返回一个stream，可pipe到其他插件 golbs(类型：String或Array) String: ‘src/js/*.js’Array: [‘src/js/*.js’, ‘src/css/*.css’] gulp.dest(path[, options]) 将pipe进来的数据转存为指定文件夹下的文件，若指定文件夹不存在，则自动创建该文件夹 path(类型：String或Function) String: ‘dist/js’Function: 在函数中返回相应路径 gulp.task(name[, deps], fn) 定义一个任务 123gulp.task('something', functio () &#123; doSomething();&#125;); name(类型：String) 任务的名字，可在命令行中通过name运行任务，$ gulp name deps(类型：Array) 一个包含任务列表的数组，这些任务会在当前任务运行之前完成 fn(类型：Function) 该任务要执行的内容 gulp.watch(glob[, opts], tasks) 或 gulp.watch(globs[, opts, cb]) 文件监视，当指定匹配文件发生变化时，执行tasks或函数cb glob(类型：String或Array) tasks(类型：String或Array) 文件变动后执行之前定义好的任务 cb(类型： Function) 传入一个记录文件变动的event对象，event.type记录变动类型：added, changed, deleted；event.path记录变动文件的路径 gulp插件介绍 gulp-less/gulp-sass 预编译less/sass文件为css文件 安装：$ npm install --save-dev gulp-less gulp-autoprefixer 设置浏览器版本，css文件自动添加浏览器前缀 安装：$ npm install --save-dev gulp-autoprefixer gulp-minify-css 压缩css文件 安装：$ npm install --save-dev gulp-minify-css gulp-rename 重命名要输出的文件，如将.css重命名为.min.css 安装：$ npm install --save-dev gulp-rename vinyl-buffer 将vinyl对象内容中的stream转换为buffer 安装：$ npm install --save-dev vinyl-buffer vinyl-source-stream 将Browserify的bundle()的输出转换为Gulp可用的vinyl流 安装：$ npm install --save-dev vinyl-source-stream gulp-sourcemaps 编写内联sourcemaps 安装：$ npm install --save-dev gulp-sourcemaps browserify 可以让你使用类似于 node 的 require() 的方式来组织浏览器端的 Javascript 代码，在这里用来管理依赖 安装：$ npm install --save-dev browserify babelify 将ES6转换成ES5 安装：$ npm install --save-dev babelify gulp-uglify 压缩 JavaScript 文件 安装：$ npm install --save-dev gulp-uglify gulp-imagemin 压缩 png，jpeg，gif和svg图片资源 安装：$ npm install --save-dev gulp-imagemin gulp-cache 图片缓存，只有图片替换了才压缩 安装：$ npm install --save-dev gulp-cache gulp-clean 移除文件或文件夹 安装：$ npm install --save-dev gulp-clean gulp-util 包含gulp的一些实用功能，在这里用来打印编译错误 安装：$ npm install --save-dev gulp-util gulp-notify 当文件变更时提醒 安装：$ npm install gulp-notify gulp-connect gulp中用来运行服务器的插件，内含LiveReload，自动刷新浏览器 安装：$ npm install --save-dev gulp-connect gulpfile.js文件配置 内含 ES6 转 ES5 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136var gulp = require('gulp'), less = require('gulp-less'), autoprefixer = require('gulp-autoprefixer'), minifycss = require('gulp-minify-css'), uglify = require('gulp-uglify'), imagemin = require('gulp-imagemin'), rename = require('gulp-rename'), clean = require('gulp-clean'), cache = require('gulp-cache'), notify = require('gulp-notify'), browserify = require('browserify'), babelify = require('babelify'), buffer = require('vinyl-buffer'), source = require('vinyl-source-stream'), sourcemaps = require('gulp-sourcemaps'), gutil = require('gulp-util'), connect = require('gulp-connect');/* * styles任务，将'src/less'目录下的less文件转换成css文件， * 并加上浏览器前缀，存放于'dist/css'目录下，之后重命名加上.min，压缩， * 保存为.min.css文件，之后刷新浏览器，并提醒style任务完成 */gulp.task('styles', function() &#123; return gulp.src('src/less/*.less') .pipe(less()) .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4')) .on('error', gutil.log) .pipe(gulp.dest('dist/css')) .pipe(rename(&#123;suffix: '.min'&#125;)) .pipe(sourcemaps.init()) .pipe(minifycss()) .pipe(sourcemaps.write('./')) .pipe(gulp.dest('dist/css')) .pipe(connect.reload()) .pipe(notify(&#123;message: 'style task complete'&#125;);&#125;);/* * scripts任务，通过browserify设置入口文件，然后用babelify将 * es6转换成es5，保存在'dist/js'目录下，之后压缩js文件，重命名 * 保存为.min.js文件 */gulp.task('scripts', function() &#123; var b = browserify(&#123; entries: 'src/js/cart.js', debug: true &#125;); return b.transform(babelify.configure(&#123; presets: [\"es2015\"] &#125;)) .bundle() .on('error', gutil.log) .pipe(source('cart.js')) .pipe(gulp.dest('dist/js')) .pipe(buffer()) .pipe(sourcemaps.init(&#123;loadMaps: true&#125;)) .pipe(uglify()) .on('error', gutil.log) .pipe(sourcemaps.write('./')) .pipe(rename(&#123; suffix: '.min'&#125;)) .pipe(gulp.dest('dist/js')) .pipe(connect.reload());&#125;);/* * images任务，读取'src/img'目录下的图片，压缩并保存到'dist/img'目录下 */gulp.task('images', function() &#123; return gulp.src('src/img/*') .pipe(cache(imagemin([ imagemin.gifsicle(&#123;interlaced: true&#125;), imagemin.jpegtran(&#123;progressive: true&#125;), imagemin.optipng(&#123;optimizationLevel: 5&#125;), imagemin.svgo(&#123;plugins: [&#123;removeViewBox: true&#125;]&#125;)]))) .on('error', gutil.log) .pipe(gulp.dest('dist/img')) .pipe(connect.reload());&#125;);/* * html任务，读取'src'目录下的html文件，并保存到'dist'目录下 */gulp.task('html', function() &#123; return gulp.src('src/shangcheng/*.html') .pipe(gulp.dest('dist/')) .pipe(connect.reload());&#125;);/* * connect任务，运行服务器并自动刷新浏览器 */gulp.task('connect', function() &#123; connect.server(&#123; livereload: true &#125;);&#125;);/* * clean任务，将dist目录下的css文件，js文件，图片文件和html文件清除 */gulp.task('clean', function() &#123; return gulp.src(['dist/css', 'dist/js', 'dist/img', 'dist/*.html'], &#123;read: false&#125;) .pipe(clean());&#125;);/* * 默认任务，在开始执行styles任务，scripts任务，images任务，html任务之前先执行clean任务 */gulp.task('default', ['clean'], function() &#123; gulp.start('styles', 'scripts', 'images', 'html');&#125;);/* * 监视任务，监听less文件，js文件，图片文件和html文件的变更 */gulp.task('watch', function() &#123; //监听所有.less gulp.watch('src/less/*.less', ['styles']); //监听所有.js文件 gulp.watch('src/js/*.js', ['scripts']); //监听所有图片文件 gulp.watch('src/img/*', ['images']); //监听html文件 gulp.watch('src/*.html', ['html']);&#125;);/* * server任务，执行connect任务和watch任务 */gulp.task('server', ['connect', 'watch']); 不含 ES6 的 js 文件任务 1234567891011gulp.task('scripts', function() &#123; return gulp.src('src/js/*.js') .pipe(gulp.dest('dist/js')) .pipe(rename(&#123; suffix: '.min' &#125;)) .pipe(sourcemaps.init(&#123;loadMaps: true&#125;)) .pipe(uglify()) .pipe(sourcemaps.write('./')) .on('error', gutil.log) .pipe(gulp.dest('dist/js')) .pipe(connect.reload());&#125;);","categories":[{"name":"自动化构建工具","slug":"自动化构建工具","permalink":"http://blog.ywulin.com/categories/自动化构建工具/"}],"tags":[{"name":"gulp","slug":"gulp","permalink":"http://blog.ywulin.com/tags/gulp/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-06-22T01:48:53.498Z","updated":"2017-06-22T01:48:53.498Z","comments":true,"path":"hello-world.html","link":"","permalink":"http://blog.ywulin.com/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}